buildscript {
    repositories {
        mavenCentral()

    }

    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${elastic_version}"
    }
}


repositories {
    mavenCentral()
    mavenLocal()
    maven {
            url "https://repo1.maven.org/maven2"
    }
}


group = 'org.elasticsearch.plugin'
version = "${plugin_version}"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'elasticsearch.yaml-rest-test'

esplugin {
    name 'elasticsearch-plugin-geoshape'
    description 'Add extra geo capabilities to default elastic geo_shape data type.'
    classname 'org.opendatasoft.elasticsearch.plugin.GeoExtensionPlugin'
    licenseFile = rootProject.file('LICENSE')
    noticeFile = rootProject.file('README.md')
}


// exclude junit from implementation to resolve a version conflict (but not from tests)
configurations {
    implementation {
        exclude(group: 'junit', module: 'junit')
    }
}

dependencies {
    implementation "org.elasticsearch:elasticsearch:${elastic_version}"

    // We ship the legacy geo archive with sources,
    // because the compilation stage needs to resolve symbols
    // However this archive is not included in the final plugin bundle, since
    // legacy geo and its dependencies (JTS) are already present at runtime
    // with ES (see the jar/manifest rule below)
    compileOnly files('libs/legacy-geo-7.17.6.jar')

    // jts.io.common is not part of ES and will be shipped with this plugin
    implementation group: 'org.locationtech.jts.io', name: 'jts-io-common', version: '1.15.0'

    yamlRestTestImplementation "org.elasticsearch.test:framework:${elastic_version}"
    yamlRestTestImplementation "org.apache.logging.log4j:log4j-core:2.17.1"
}

// Since this plugin is meant to be loaded in an ES >=7.16 instance,
// we can "link" it to existing classes through a class path without adding other archives
// to the plugin bundle
jar {
    manifest {
         attributes(
                "Class-Path": "../../modules/legacy-geo/legacy-geo-7.17.6.jar ../../modules/legacy-geo/jts-core-1.15.0.jar ../../modules/legacy-geo/spatial4j-0.7.jar")

    }
}

// Make sure the ES distribution used for rest tests is the "complete" variant
// Otherwise weirds errors occur (like the geo_shape type is not handled)
testClusters.configureEach {
    testDistribution = 'DEFAULT'
    // disable security to disable failing warnings
    setting 'xpack.security.enabled', 'false'
}

